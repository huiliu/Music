#!/usr/bin/python3.2

from urllib.request import urlopen
from urllib.parse import urlencode
#from common import ParseHtml
from html.parser import HTMLParser
import re
from pprint import pprint

class ParseHtml(HTMLParser):
    """
        The Class use to parse HTML
    """
    text = ''
    url = ''
    def handle_starttag(self, tag, attrs):
        if tag == 'a' and attrs:
            for attr in attrs:
                if attr[0] == 'href':
                    self.url = attr[1]
                    break
    def handle_data(self, data):
        self.text += data

def search ( keyword, pageNum = 1 ):
    """
        This function use to setup parameter use to search song you want to
        listen.
    
        Return the page of result
    """

    data = {}
    data['f'] = 'ms'
#   data['rf'] = 'idx'
    data['tn'] = 'baidump3'
    data['ct'] = '134217728'
    data['lf'] = ''
    data['rn'] = ''
    data['word'] = keyword
    data['lm'] = -1
    data['pn'] = 30 * (pageNum - 1)
    #flag use to indicate whether is music class by system. 
    #if it's, set gate = 33
#   data['gate'] = 33

    #you'd better setup the encoding's value is GBK, because type in
    #Chinese would result in error.
    url_values = urlencode(data, encoding = 'gbk')
    url = 'http://mp3.baidu.com/m?' + url_values
    print( url )

    reg_pure = re.compile('[\n\t\r\v\f]')

    #Get Data that contain some information i need 
    page = reg_pure.sub('', urlopen(url).read().decode('gbk'))

    return page

def SearchLegal( song, singer, album = '' ):
    """
        Download the legal music.
    """
    data = {}
    data['song'] = song
    data['singer'] = singer
    data['album'] = album

    url_values = urlencode(data, encoding = 'gbk')
    url = 'http://mp3.baidu.com/d?' + url_values

    print(url)

def item( page, regExp ):
    """
        This Function use to analysis the result of search, you can get
        the index, title(song), singer's name, ablum, lyric, formation,
        the size of file, the speed of download, and the url to down 
        page.


        page   the result page generated by search
        regExp is regular expression list

        Return a List that like the result table in the html page
    """
    data = []
    URL = []
    num = len(regExp)
    i = 0

    while i < num:
        texts = []
        reg_tmp = re.compile( regExp[i] )
        tmp_data = reg_tmp.findall( page )
        for text in tmp_data:
            myParser = ParseHtml()
            myParser.feed(text)
            texts.append( myParser.text.strip().replace('正版', '(正版)') )
            if i == 1:
                #hyperlink to down page
                downPage = myParser.url.strip() 
                #The music's download hyperlink
                downURL = DownloadURL( downPage )
                URL.append( downURL )
        i += 1
        data.append( texts )
    data += [URL]

    items = []
    for index, title, singer, ablum, lyric, formation, size, speed, \
        url in zip(data[0], data[1], data[2], data[3], \
            data[4], data[5], data[6], data[7], data[8]):
        item = {
                    "index":index, \
                    "title":title, \
                    "singer":singer, \
                    "album":ablum, \
                    "lyric":lyric, \
                    "formation":formation, \
                    "size":size, \
                    "speed":speed, \
                    "url":url
                }
        items.append( item )
    return items

def ParseResult( data ):
    """
    USAGE:
        return singer's song list.
        {songName:[songSize,songurl]...}

        singerurl   the url that list the singer's song
    """
    #regular expression List
    reg_list = [
                #the index
                '<td class="first">.*?<\/td>', \
                #the title of the song
                '<td class="second">.*?<\/td>',\
                #The singer's name
                '<td class="third">.*?<\/td>',\
                #Ablum
                '<td class="fourth">.*?<\/td>',\
                #Lyric
                '<td class="sixth">.*?<\/td>',\
                #Formation
                '<td class="eighth">.*?<\/td>',\
                #Size
                '<td class="seventh">.*?<\/td>',\
                #Down speed
                '<td class="ninth">.*?<\/td>'\
                ]
    
    lists = item( data, reg_list )

    return lists

def DownloadURL( url ):
    """
        USAGE:
            return a url list about the song you want to listen.
    """
    #print(url)
    reg = re.compile('subulrs =.*?]')
    reg_head = re.compile('encurl.*?,')
    
    data = urlopen(url).read().decode('gbk')
    urllist = reg.findall(data,re.VERBOSE)[0][11:-1].replace("' + '", '').replace("'", '').split(',')
    head = reg_head.findall(data)[0][10:-2].replace("' + '", '')

    urllist.append(head)

    return urllist 

def DownloadLegal( url ):
    """
        use to handle the legal music.
    """
    reg_url = re.compile('(?<=a id="downlink" href=").*?"')
    data = urlopen(url).read().decode('gbk')
    
    return 'http://mp3.baidu.com' + reg_url.findall(data)[0]



def Interface():
    tips = """Please Type in the word what you want to search:\n"""
#TODO:  there need check user's input
    inWord = input(tips)
    result = ParseResult( search( inWord ) )
    outWord_result = "We have find {} result"
    print( outWord_result.format(len(result)) )
    inWordCheck = input("Would you like to check?(Y/N): ")
    if inWordCheck == 'Y':
        pprint( result )
    else:
        outListen = "Would you like listen music by random?(Y/N): "
        inListen = input(outListen)
        if inListen == 'Y':
            #TODO   Play music by random.
            print("Developing...")
            url = result[5]['url']
            downlist = DownloadURL( url )
            print(downlist)
    
    

if __name__ == '__main__':
    #search( '传奇' )
    #DownloadURL('李健', '传奇')
    #SearchLegal('李健', '传奇')
    Interface()
